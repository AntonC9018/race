//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Gameplay/car.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Race.Gameplay
{
    public partial class @CarControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CarControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""car"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8cbd7445-8242-4799-ab4d-0d16d39c85f8"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Value"",
                    ""id"": ""272bada4-edd7-4f0b-b1de-28215c12ab52"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Value"",
                    ""id"": ""015b5c7f-bcbc-44cf-9689-d2face31f163"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""f38351c7-0baf-4f3d-b8b8-79f403e59190"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""Value"",
                    ""id"": ""99f7cce0-316f-480f-9180-dee6a4e86be9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearUp"",
                    ""type"": ""Button"",
                    ""id"": ""6ddeeaad-6c8d-4344-a086-22d2fc3021eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GearDown"",
                    ""type"": ""Button"",
                    ""id"": ""dff73ab2-de5a-4dfb-bf24-f41b2c24a162"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fc27d388-1a22-43f4-87dd-d39f25eed484"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0e0232c8-3b46-4501-86f5-8721b327ef0f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8590fec5-72c6-401a-aca2-59c4b86bab30"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6c215949-72d9-4b3f-990a-e85d6030c6e0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f9a8be7-f11c-4590-81f8-868ca0421e0f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""GearUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f5dd31d-a172-4e9e-983d-122597c5baa0"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""GearDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""617069df-7216-4ffa-b74c-d565c362b29f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d985284-d8ac-46f5-bdb2-c3c048ac6b61"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Forward = m_Player.FindAction("Forward", throwIfNotFound: true);
            m_Player_Backward = m_Player.FindAction("Backward", throwIfNotFound: true);
            m_Player_Turn = m_Player.FindAction("Turn", throwIfNotFound: true);
            m_Player_Clutch = m_Player.FindAction("Clutch", throwIfNotFound: true);
            m_Player_GearUp = m_Player.FindAction("GearUp", throwIfNotFound: true);
            m_Player_GearDown = m_Player.FindAction("GearDown", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Forward;
        private readonly InputAction m_Player_Backward;
        private readonly InputAction m_Player_Turn;
        private readonly InputAction m_Player_Clutch;
        private readonly InputAction m_Player_GearUp;
        private readonly InputAction m_Player_GearDown;
        public struct PlayerActions
        {
            private @CarControls m_Wrapper;
            public PlayerActions(@CarControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Forward => m_Wrapper.m_Player_Forward;
            public InputAction @Backward => m_Wrapper.m_Player_Backward;
            public InputAction @Turn => m_Wrapper.m_Player_Turn;
            public InputAction @Clutch => m_Wrapper.m_Player_Clutch;
            public InputAction @GearUp => m_Wrapper.m_Player_GearUp;
            public InputAction @GearDown => m_Wrapper.m_Player_GearDown;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Forward.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnForward;
                    @Forward.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnForward;
                    @Forward.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnForward;
                    @Backward.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBackward;
                    @Backward.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBackward;
                    @Backward.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBackward;
                    @Turn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                    @Turn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                    @Turn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                    @Clutch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClutch;
                    @Clutch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClutch;
                    @Clutch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClutch;
                    @GearUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearUp;
                    @GearUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearUp;
                    @GearUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearUp;
                    @GearDown.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearDown;
                    @GearDown.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearDown;
                    @GearDown.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGearDown;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Forward.started += instance.OnForward;
                    @Forward.performed += instance.OnForward;
                    @Forward.canceled += instance.OnForward;
                    @Backward.started += instance.OnBackward;
                    @Backward.performed += instance.OnBackward;
                    @Backward.canceled += instance.OnBackward;
                    @Turn.started += instance.OnTurn;
                    @Turn.performed += instance.OnTurn;
                    @Turn.canceled += instance.OnTurn;
                    @Clutch.started += instance.OnClutch;
                    @Clutch.performed += instance.OnClutch;
                    @Clutch.canceled += instance.OnClutch;
                    @GearUp.started += instance.OnGearUp;
                    @GearUp.performed += instance.OnGearUp;
                    @GearUp.canceled += instance.OnGearUp;
                    @GearDown.started += instance.OnGearDown;
                    @GearDown.performed += instance.OnGearDown;
                    @GearDown.canceled += instance.OnGearDown;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_XRSchemeIndex = -1;
        public InputControlScheme XRScheme
        {
            get
            {
                if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
                return asset.controlSchemes[m_XRSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnForward(InputAction.CallbackContext context);
            void OnBackward(InputAction.CallbackContext context);
            void OnTurn(InputAction.CallbackContext context);
            void OnClutch(InputAction.CallbackContext context);
            void OnGearUp(InputAction.CallbackContext context);
            void OnGearDown(InputAction.CallbackContext context);
        }
    }
}
